datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   Boolean?         @default(false)
  image           String?
  contact         String?
  collegeId       String?
  idURL           String?
  college         College?         @relation(fields: [collegeId], references: [id])
  role            Role             @default(PARTICIPANT)
  teamId          String?
  team            Team?            @relation(fields: [teamId], references: [id])
  characterPlayed CharacterOnUser? @relation(fields: [characterId], references: [character])
  characterId     Characters?
  leaderOf        Team?            @relation(fields: [leaderId], references: [id], name: "TeamLead")
  leaderId        String?          @unique
  isIdVerified    Boolean          @default(false)
  accounts        Account[]
  sessions        Session[]

  @@index([collegeId])
  @@index([teamId])
  @@index([characterId])
}

model TeamMembers {
  id     String @id @default(cuid())
  email  String
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model College {
  id        String   @id @default(cuid())
  name      String
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     User[]
  Team      Team?
  password  String?
}

model Team {
  id            String          @id @default(cuid())
  name          String          @unique
  isComplete    Boolean         @default(false)
  attended      Boolean         @default(false)
  college       College?        @relation(fields: [college_id], references: [id])
  college_id    String?         @unique
  members       User[]
  leader        User?           @relation(name: "TeamLead")
  teamScore     Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  remark        String          @default("")
  criteria      criteria[]
  criteriaScore criteriaScore[]
  TeamMembers   TeamMembers[]
  editRequests  EditRequests?
  Score         Score[]

  @@index([college_id])
}

model CharacterOnUser {
  id        String     @id @default(cuid())
  character Characters @unique
  playedBy  User[]
  userId    String?    @unique
  score     Int
  Score     Score[]
}

model criteria {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Team          Team?           @relation(fields: [teamId], references: [id])
  teamId        String?
  criteriaScore criteriaScore[]
  Score         Score[]

  @@index([teamId])
}

model criteriaScore {
  id        String   @id @default(cuid())
  criteria  criteria @relation(fields: [id], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamID], references: [id], onDelete: Cascade)
  teamID    String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamID])
  @@index([id])
}

model Score {
  id              String          @id @default(cuid())
  criteria        criteria        @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  team            Team            @relation(fields: [teamID], references: [id], onDelete: Cascade)
  teamID          String
  criteriaId      String
  characterPlayed CharacterOnUser @relation(fields: [characterId], references: [character])
  characterId     Characters
  score           Int

  @@index([teamID])
  @@index([criteriaId])
  @@index([characterId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EditRequests {
  id        Int        @id @default(autoincrement())
  teamId    String?    @unique
  Team      Team?      @relation(fields: [teamId], references: [id])
  status    editStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Characters {
  SHANTHANU
  MANTRI_SUNEETHI
  TAMAALAKETHU
  TAAMRAAKSHA
  SATHYAVATHI
  DAASHARAJA
  DEVAVRATHA
}

enum Role {
  PARTICIPANT
  ADMIN
  ORGANIZER
  JUDGE
}

enum editStatus {
  PENDING
  GRANTED
  REVOKED
}
